. Verificar versão do Git instalado.
	git --version

. Atualizando a URL do repositório remoto:
	git remote set-url origin https://meu-repo.com/projeto.git/

-- Configurando usuário global e e-mail, sem isso configurado em um ambiente Linux fica inviável.

	git config --global user.name "Javan Torres"

	git config --global user.email "javantorres@gmail.com"

-- Armazenar credenciais após colocar login e senha (não de forma global).
	git config credential.helper store

http://rogerdudler.github.io/git-guide/index.pt_BR.html

Subindo um repositório para o Github: Criar a pasta do projeto, com o nome de exemplo 'angular1' localmente e depois criar um projeto com o mesmo nome remotamente (github, gitlab, etc), rodar os comandos:
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/JavanTorres/angular1.git
git push -u origin master

-- Fazer clone do projeto já em um branch específico
	git clone -b dev https://github.com/username/project.git

--- Trabalhando com arquivos.
. Listar a situação dos arquivos:
	git status
	
--- Trabalhando com um Branch local.

. Criar um novo branch chamado "nome_do_branch_local" e selecione-o usando:
	git checkout -b nome_do_branch_local

. Alterar o Brach Local:
	git checkout master

. Para deletar um branch local:
	git branch -D nome_do_branch_loc

--- Fluxo padrão para subir alterações.

.  Para adicionar alterações em um arquivo já existente ou arquivo novo:
	git add nome_do_documento

.  Para adicionar todos os arquivos ao branch local:
	git add -A

.  Para commitar alterações já adicionadas ao branch local:
	git commit -m "Comentários em relação ao commit."

.  Para adicionar todas as alterações feitas no branch e commitar ao mesmo tempo:
	git commit -am "Comentários em relação ao commit."

.  Puxar alterações de um branch específico:
	git pull origin nome_do_branch_remoto

.  Melhorar o log:
>>>
	git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

.  Rodar:
 	git lg
 
>>

--- STASH - https://git-scm.com/book/pt-br/v1/Ferramentas-do-Git-Fazendo-Stash

.  Fazendo Stash do trabalho:
	git stash
.  Fazendo Stash do trabalho incluíndo arquivos novos:
	git stash --include-untracked
	git stash save beneficiarios --include-untracked

.  Fazendo Stash do trabalho e gravando uma descrição 'salvando as alterações no properties':
	git stash save salvando as alterações no properties
	
.  Fazendo Stash do trabalho e gravando uma chave 'arquivo_de_pagamento' (opcional):
	git stash push -m arquivo_de_pagamento app/controller/pagamentoController.js
	
.  Listando alterações armazenadas via Stash:
	git stash list

.  Aplicando uma alteração armazenada via Stash de índice 3 (como anumeração de array (2), mas o Stash é uma PILHA):
	git stash apply stash@{2}

.  Revertendo um Stash de índice 3, mas matendo o Stash ('-R' é a mesma coisa que '--reverse'):
	git stash show -p stash@{2} | git apply -R

.  Revertendo o primeiro Stash da pilha, mas matendo o Stash:
	git stash show -p | git apply -R

.  Dropando um Stash específico.
	git stash drop stash@{2}
	
.  Dando um apply e em seguida um drop no Stash que está no topo da pilha.
	git stash pop

--- Trabalhando com um Branch remoto.
                           
. Para baixar um branch remoto:
	git checkout -b nome_do_branch_local origin/nome_do_branch_remoto

. Para fazer merge puxando as alterações do branch_local_de_alteracao (branch criado com base no branch_local), com o branch_local que será enviado para a nuvem:
	# Na hora de fazer o merge é preciso estar no branch branch_local.
	git merge branch_local_de_alteracao

. Criando um Branch remoto/Enviando o branch local:
	#Caso não exista uma branch remoto com o mesmo nome do branch local em 
	git push origin nome_do_branch_local

-- Sobrescrever com MERGE

Temos dois branchs atual_branch e old_branch, queremos sobrescrever o old_branch para deixar ele igual ao atual_branch.

git checkout atual_branch 	# source name
git merge -s ours old_branch, 	# target name
git checkout old_branch, 	# target name
git merge atual_branch 		# source name

Após 'git merge atual_branch' todas as alterações de 'atual_branch' serão sobrescritas em 'old_branch' e 'old_branch' que estava muito defasado ficará igual ao 'atual_branch'.

Usar git flow com rebase?
https://gist.github.com/paulo-raoni/1a8f52138f67fd40379f454ee61aa4ce#file-gitflowpassoapasso-md

https://stackoverflow.com/questions/16288176/your-branch-is-ahead-of-origin-master-by-3-commits

https://stackoverflow.com/questions/2016901/viewing-unpushed-git-commits
